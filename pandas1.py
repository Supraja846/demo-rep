# -*- coding: utf-8 -*-
"""pandas1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U9rUc8hHmkXFTAZ7c_lmCxu1kG14woaD
"""

!wget "https://drive.google.com/uc?export=download&id=1E3bwvYGf1ig32RmcYiWc0IXPN-mD_bI_" -O mckinsey.csv

import pandas as pd
df=pd.read_csv('mckinsey.csv')
df.head()

#filter year between 1950 and 1955
#df[(df['year']>=1950) & (df['year']<=1955)]
#print(df[df['life_exp'].max()==df['life_exp']])#['country']


#a=df['gdp_cap']/df['life_exp']
#a.sort_values()
a=pd.DataFrame({'name': ['a', 'b', 'c'], 'age': [12, 15, 18]})
b=pd.DataFrame([['d', 20], ['e', 21], ['f', 22]],columns=['name','age'])
c=pd.concat([a,b],axis=0,ignore_index=True)
#c

df1 = pd.DataFrame({'name': ['Jack','Ryan','Chris','Sam'],
'rank': [1, 2, 3, 4]})
df2 = pd.DataFrame({'name': ['Ryan', 'Sam', 'Chris', 'Jack'],
'rank': [3, 1, 4, 2]})

#print(pd.merge(df1, df2, on="name"))
#print(df1.sort_values(['name','rank']))

import pandas as pd

# Create a sample DataFrame with a custom index
data = {'value': [10, 20, 30, 40]}
index = ['B', 'D', 'A', 'C']
df1 = pd.DataFrame(data, index=index)
print(df['value'].count())

# Sort the DataFrame by index in ascending order
sorted_df = df.sort_index()
#print(df)
#print(sorted_df)

# Example with MultiIndex
index = pd.MultiIndex.from_tuples([('A', 1), ('B', 2), ('A', 2), ('B', 1)])
df = pd.DataFrame({'value': [10, 20, 30, 40]}, index=index)

# Sort by the first level of the MultiIndex
sorted_df_level = df.sort_index(level=0)
#print(df)
#print(sorted_df_level)

#how to convert object to string
df['country']=df['country'].astype(str)
df.dtypes

import pandas as pd

# DataFrame 1
df1 = pd.DataFrame({'employee_id': [1, 2, 3, 4],
                    'name': ['Alice', 'Bob', 'Charlie', 'David']})

# DataFrame 2
df2 = pd.DataFrame({'employee_id': [2, 3, 5],
                    'department': ['Sales', 'Marketing', 'HR']})

# Merge df1 and df2 based on 'employee_id' using an inner join
merged_df = pd.merge(df1, df2, on='employee_id', how='inner')

print(merged_df)

pd.DataFrame(df,columns=['country','gdp_cap','continent'])

df[['country','gdp_cap','continent']]

df.loc[:4,"country":"continent"]

df.index

len(df.index)

import pandas as pd

data = {'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'],
        'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'],
        'C': ['small', 'large', 'large', 'small', 'small', 'large', 'large', 'small'],
        'D': [1, 2, 2, 3, 3, 4, 5, 6]}

df = pd.DataFrame(data)
df.duplicated(subset=['A', 'B'],keep='first')
#print(sum(df.duplicated(subset=['A', 'B'])))

df.duplicated(subset=['A', 'B'],keep=False)

import pandas as pd

data = {
    'name': ['Bruno', 'Ariana', 'Harry', 'Selena', 'Weeknd'],
    'gender': ['M', 'F', 'M', 'F', 'M'],
    'income': ['low', 'high', 'medium', 'medium', 'medium']
}

df = pd.DataFrame(data)

medium_income = df[df['income']=='medium']
print(medium_income)

    ### STEP 2: calculate count of medium income employees

#medium_income_count = medium_income['income'].count()
medium_income_count=len(medium_income)
print(medium_income_count)

    ### STEP 3: calculate percentage of medium income employees
a=df['income'].count()
print(a)
result = (medium_income_count/a)*100
print(result)

##Calculate and return the percentage of employees in medium income bracket.

import pandas as pd

data = {
    'cust_id': [101, 102, 103, 104],
    'name': ['rick', 'morty', 'pickle', 'jerry']
}

customer = pd.DataFrame(data)

import pandas as pd

data = {
    'order_id': ['OR1', 'OR3', 'OR23', 'OR42'],
    'cust_id': [102, 105, 101, 102],
    'amount': [1200, 650, 120, 989]
}

orders = pd.DataFrame(data)

merged_df = pd.merge(customer,orders,on='cust_id',how='right')

    ## STEP 2: calculate sum of amount for given name

sum_amount = merged_df[merged_df['name']=='morty']['amount'].sum()
#print(astype(sum_amount,float64))
sum_amount.astype(float)

